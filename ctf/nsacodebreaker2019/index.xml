<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Overview | venGaza</title>
    <link>https://vengaza.github.io/ctf/nsacodebreaker2019/</link>
      <atom:link href="https://vengaza.github.io/ctf/nsacodebreaker2019/index.xml" rel="self" type="application/rss+xml" />
    <description>Overview</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 09 Sep 2018 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://vengaza.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Overview</title>
      <link>https://vengaza.github.io/ctf/nsacodebreaker2019/</link>
    </image>
    
    <item>
      <title>Task 1</title>
      <link>https://vengaza.github.io/ctf/nsacodebreaker2019/001task1/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://vengaza.github.io/ctf/nsacodebreaker2019/001task1/</guid>
      <description>&lt;h2 id=&#34;it-begins-network-traffic-analysis&#34;&gt;It Begins! (Network Traffic Analysis)&lt;/h2&gt;
&lt;p&gt;There are many challenges that we will need to overcome in order to exploit TerrorTime. The first is that we do not yet have a copy of it. We have learned few details through intelligence sources, but the terrorists have managed to keep the app hidden. It is not publicly available on any App Store. Fortunately, as part of a recent military operation, specialized collection gear was forward deployed near the terrorist&amp;rsquo;s area of operations. This resulted in a trove of collected traffic and we need your help to analyze it. Your first task is to find and extract a copy of the TerrorTime Android Package (APK) file from the packet capture. Submit the APK&amp;rsquo;s SHA256 hash. This will help us search other intelligence sources for connections to users. To test out the app, we also need the registration information their leadership uses to register each client. Analyze the packet capture for this data and submit the registration information for 2 clients (in any order).&lt;/p&gt;
&lt;h3 id=&#34;flags&#34;&gt;Flags&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; SHA256 Hash of the Terrotime APK (Hexadecimal/Base16 encoded)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Client IDs and Secrets (one pair of credentials per line, separated by colon)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://codebreaker.ltsnet.net/files/task1/terrortime.pcapng?1593563870&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Task Files&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;h3 id=&#34;commands&#34;&gt;Commands&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat&lt;/code&gt; - read and conCATenate files (Linux/OSX)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sha256sum&lt;/code&gt; - compute and check SHA256 message digest (Linux/OSX)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;File-GetHash&lt;/code&gt; - compute and check SHA256 message digest (Windows)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tools&#34;&gt;Tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.wireshark.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WireShark&lt;/a&gt; - Network Protocol Analyzer&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;analysis&#34;&gt;Analysis&lt;/h3&gt;
&lt;p&gt;In this challenge, we are given a &lt;code&gt;.pcapng&lt;/code&gt; file which is a packet capture format that contains a dump of data packets caught over a network. We will use &lt;mark&gt;WireShark&lt;/mark&gt;, a network protocol analyzer, to open this file and view the captured data packets.&lt;/p&gt;





  











&lt;figure id=&#34;figure-packets-in-wireshark&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://vengaza.github.io/img/nsa2019/001task1/packets.png&#34; data-caption=&#34;Packets in wireshark&#34;&gt;


  &lt;img src=&#34;https://vengaza.github.io/img/nsa2019/001task1/packets.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Packets in wireshark
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Even though there are over 9000 packets in this dump, we immediately notice that the 4th packet stands out because the &amp;ldquo;terrorTime&amp;rdquo; name is mentioned in its information section. This packet was sent using an application layer protocol called &lt;code&gt;HTTP&lt;/code&gt;. Let&amp;rsquo;s use a Wireshark filter to reduce the noise and list only the packets using the HTTP protocol.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;* If the HTTP packet had not been so obvious, another technique would have been to checkout the protocol hierarchy of the dump: &lt;code&gt;STATISTICS &amp;gt; PROTOCOL HIERARCHY&lt;/code&gt;. This is an excellent tool to use to gain more insight into the dump when looking for clues.&lt;/em&gt;&lt;/p&gt;





  











&lt;figure id=&#34;figure-http-packets-in-wireshark&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://vengaza.github.io/img/nsa2019/001task1/httpPackets.png&#34; data-caption=&#34;HTTP Packets in wireshark&#34;&gt;


  &lt;img src=&#34;https://vengaza.github.io/img/nsa2019/001task1/httpPackets.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    HTTP Packets in wireshark
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;~9000 packets have now been reduced to 4! There are 2 GET requests with 2 responses which seem to have file objects associated with them. The first file is the missing APK. The other seems to be a text document. We&amp;rsquo;ll extract and save these files with WireShark: &lt;code&gt;FILE &amp;gt; EXPORT OBJECTS &amp;gt; HTTP &amp;gt; SAVE&lt;/code&gt;.&lt;/p&gt;





  











&lt;figure id=&#34;figure-extracting-the-http-files&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://vengaza.github.io/img/nsa2019/001task1/files.png&#34; data-caption=&#34;Extracting the http files&#34;&gt;


  &lt;img src=&#34;https://vengaza.github.io/img/nsa2019/001task1/files.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Extracting the http files
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;With the &lt;code&gt;terrortime.apk&lt;/code&gt; in hand, we can now run the &lt;code&gt;sha256sum&lt;/code&gt; command on the APK file to determine its hash value and complete the first task.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sha256sum terrortime.apk
$ 65f87dfb701694d5b72963e6b707fda6882de72612af59296c255bef00a3699e  terrortime.apk 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also need to locate the registration information for 2 clients. Let&amp;rsquo;s investigate the &lt;code&gt;README.developer&lt;/code&gt; file we extracted earlier to see if there are any hints. This file can be opened up using a text editor or you use the &lt;code&gt;cat&lt;/code&gt; command to print the file out to the terminal.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat README.developer
------------------
terrorTime.apk -- Most current version of terrortime APK for android mobile devices
ava--vhost-10@terrortime.app -- First Terrortime test account client id
emmett--vhost-10@terrortime.app -- Second Terrortime test account client id
7rIFNGekGSE6Ai -- First Terrortime test account client secret
BJMwJzGTkKDgB2 -- Second Terrortime test account client secret

Used above client information for testing. See test report in Master.

Dev bobs comments on most recent APK code changes
---------------------------------------------------
(20190613) Beta version of Terrortime app completed. Successfully tested. Waiting for customer feedback.

(20190723) Had to make some notable changes to Terrortime authentication mechanisms based on new Customer requirements (as of this week). Code changes were just committed to Master. Not pretty, but will support future operational needs (didnt ask ...dont want to know the details).

Changes also support recently clarified deployment/use CONOP. App will be installed and pre-configured on mobile device before device is given to associate. Associate must use app as configured to interact with Terrortime chat service and will not be provided plaintext version of credentials required for part of authentication process. App will use its credentials to authenticate itself to Terrortime infrastructure, a process that will be transparent to user/associate. Associate will be provided a PIN that allows him/her to open Terrortime app. 

See design documentation in Master README file for details.

(20190725) After a few bug fixes, Terrortime app passed testing. No rest for the weary.

(20190726) Packaged up and ready to ship! $$$$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Luckily, the information we are looking for is revealed within this file with 2 accounts listed along with the client secrets. How convenient ðŸ˜„&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Task 2</title>
      <link>https://vengaza.github.io/ctf/nsacodebreaker2019/002task2/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://vengaza.github.io/ctf/nsacodebreaker2019/002task2/</guid>
      <description>&lt;h2 id=&#34;permissions-mobile-apk-analysis&#34;&gt;Permissions (Mobile APK Analysis)&lt;/h2&gt;
&lt;p&gt;The TerrorTime APK file contains metadata that describes various security properties of the application that we want to know. Since we now have a copy of the APK thanks to the military operation described in Task 1, we need you to identify and submit the following:&lt;/p&gt;
&lt;h3 id=&#34;flags&#34;&gt;Flags&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; App Permissions (Capital letters and underscores, one per line)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; SHA256 of Signing Certificate (Hexadecimal/Base16 encoded)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Certificate Signer Name (ASCII)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please note that completion of task 1 is required to complete this task.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://codebreaker.ltsnet.net/files/task2/terrortime.pcapng?1593563870&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Task Files&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;h3 id=&#34;commands&#34;&gt;Commands&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apkanalyzer -h manifest permissions&lt;/code&gt; - Print application permissions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apksigner verify --print-certs&lt;/code&gt; - Print out APK certificate information&lt;/li&gt;
&lt;li&gt;&lt;code&gt;File-GetHash&lt;/code&gt; - compute and check SHA256 message digest (Windows)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tools&#34;&gt;Tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://developer.android.com/studio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Android Studio&lt;/a&gt; - Google IDE for Android&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://ghidra-sre.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ghidra&lt;/a&gt; - NSA&amp;rsquo;s software reverse engineering suite (Optional)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;analysis&#34;&gt;Analysis&lt;/h3&gt;
&lt;p&gt;In this challenge, we&amp;rsquo;ll continue analyzing the Terrortime APK we recovered in the previous challenge. We first need to figure out the application&amp;rsquo;s permissions. It is first important to understand what an APK file actually is.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Android Package (APK)[1] is the package file format used by the Android, and a number of other Android-based operating systems for distribution and installation of mobile apps, mobile games and middleware.&lt;/p&gt;
&lt;p&gt;&amp;ndash; &lt;cite&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Android_application_package&#34;&gt;https://en.wikipedia.org/wiki/Android_application_package&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is also important to realize that an APK is a compiled file meaning the source code (human readable) has been transformed into machine code (computer executable). This makes it difficult to do any meaningful analysis without first figuring out a way to decompile the file to make it human readable once again. A great tool for this was released by the NSA, &lt;mark&gt;Ghidra&lt;/mark&gt;. There are also other tools such JADX and APKtool. I will not be making use of these tools for this challenge, but they are important tools to be aware of when the need to reverse arises.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;* Tip: APK files can also be unzipped by changing the file extension from APK to ZIP.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If we look at the objectives for this task, we should take notice that the information being requested
is just the application metadata (attributes) of the file itself which means there should be no need to decompile. We just need to figure out a way to view the metadata since this capability is not natively built into our operating system. Enter &lt;mark&gt;Android Studio&lt;/mark&gt;, Google&amp;rsquo;s official Android integrated development environment (IDE) which comes with a variety of tools to make the development of Android applications easier. We are specifically interested in the Android Software Development Kit (SDK) within Android Studio which provides access to some powerful command line tools to assist in our analysis.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;* Tip: Whenever doing an analysis on unfamiliar software, always check to see if an SDK exists and what tools the developers are using!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Because I have not spent any time developing Android applications, I had to go through the documentation to find tools for the task. The first command line tool I came across which seemed helpful was the &lt;code&gt;apkanalyzer&lt;/code&gt;. This package provides us with the &lt;code&gt;apkanalyzer -h manifest permissions&lt;/code&gt; command and allows us to print out the permissions for the APK file. Perfect!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ apkanalyzer -h manifest permissions terrorTime.apk
$ android.permission.INTERNET
$ android.permission.ACCESS_NETWORK_STATE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have the APK permissions, but what do these permissions actually mean? Upon further review of the Android documentation we discover:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ACCESS_NETWORK_STATE: Allows applications to access information about networks.&lt;br&gt;
INTERNET: Allows applications to open network sockets.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The next part of the task requires us to find certificate information. Luckily, there is another package within the Android SDK called &lt;code&gt;apksigner&lt;/code&gt;. This package provides us with the &lt;code&gt;apksigner verify --print-certs&lt;/code&gt; command and allows us to print out information about the APK&amp;rsquo;s signing certificates.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ apksigner verify --print-certs terrorTime.apk
$ Signer #1 certificate DN: CN=dev_terrorTime_378361, OU=TSuite
$ Signer #1 certificate SHA-256 digest: 2bcd16e90870731a7c298348ead84dc8403d16c63509b36fbc26e469fa697961
$ Signer #1 certificate SHA-1 digest: c4db0963ba6fb32b4c9f3515f71040e68f670685
$ Signer #1 certificate MD5 digest: 7fe6476d39c9fe7f81d32ccbf651eff2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can see, this command prints out the certificate information and provides both the SHA256 of the signing certificate and the common name (CN) of the developer who signed it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;* Note: Do not be discouraged if you were unable to get the Android SDK commands up and running. Admittedly, I ran into issues with the SDK not playing nice with the various versions of Java on my machine. This required some tinkering with my &lt;code&gt;.zshrc&lt;/code&gt; to make sure the right JDK version was being used.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Task 3</title>
      <link>https://vengaza.github.io/ctf/nsacodebreaker2019/003task3/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://vengaza.github.io/ctf/nsacodebreaker2019/003task3/</guid>
      <description>&lt;h2 id=&#34;turn-of-events-database-analysis&#34;&gt;Turn of Events (Database Analysis)&lt;/h2&gt;
&lt;p&gt;Analysts found TerrorTime installed on a device that was taken from a terrorist arrested at a port of entry in the US. They were able to recover the SQLite database from the TerrorTime installation on the device, which should provide us with more in-depth knowledge about the terrorist&amp;rsquo;s communications and the TerrorTime infrastructure. Your goal for this task is to analyze the database and submit the addresses of the TerrorTime OAUTH (authentication) and XMPP (chat) servers.&lt;/p&gt;
&lt;h3 id=&#34;flags&#34;&gt;Flags&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; OAUTH IP Address&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; XMPP Server IP Address&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://codebreaker.ltsnet.net/files/task3/clientDB.db?1593563870&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Task Files&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;h3 id=&#34;commands&#34;&gt;Commands&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dig&lt;/code&gt; - Domain Information Groper, a DNS lookup utility&lt;/li&gt;
&lt;li&gt;&lt;code&gt;host&lt;/code&gt; - A utility to perform DNS lookups (Optional)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nslookup&lt;/code&gt; - Performs DNS queries (Optional)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ping&lt;/code&gt; - Send ICMP ECHO_REQUEST to network hosts (Optional)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tools&#34;&gt;Tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://sqlitebrowser.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DB Browser for SQLite&lt;/a&gt; - Create, search and edit databases&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;analysis&#34;&gt;Analysis&lt;/h3&gt;
&lt;p&gt;In this challenge, we are presented with an SQLite database file and tasked with finding the IP (network) addresses of the OAUTH and XMPP servers. What is SQLite, OAUTH, and XMPP?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SQLite is a C-language library that implements a small, fast, self-contained, high-reliability, full-featured, SQL database engine. SQLite is the most used database engine in the world.&lt;/p&gt;
&lt;p&gt;&amp;ndash; &lt;cite&gt;&lt;a href=&#34;https://www.sqlite.org/index.html&#34;&gt;https://www.sqlite.org/index.html&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;OAUTH is an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications.&lt;/p&gt;
&lt;p&gt;&amp;ndash; &lt;cite&gt;&lt;a href=&#34;https://oauth.net/&#34;&gt;https://oauth.net/&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;XMPP is the Extensible Messaging and Presence Protocol, a set of open technologies for instant messaging, presence, multi-party chat, voice and video calls, collaboration, lightweight middleware, content syndication, and generalized routing of XML data.&lt;/p&gt;
&lt;p&gt;&amp;ndash; &lt;cite&gt;&lt;a href=&#34;https://xmpp.org/about/technology-overview.html&#34;&gt;https://xmpp.org/about/technology-overview.html&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What separates SQLite from other relational databases management systems (RDBMS) is it embeds itself with the program rather than relying on a client-server model. This means no additional server is needed to run and manage this database. We will use a special tool to open this file and one of my favorite is &lt;mark&gt;DB Browser for SQLite&lt;/mark&gt;. Open up the file and go to the &lt;code&gt;BROWSE DATA&lt;/code&gt; tab.&lt;/p&gt;





  











&lt;figure id=&#34;figure-database-opened-by-db-browser&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://vengaza.github.io/img/nsa2019/003task3/database.png&#34; data-caption=&#34;Database opened by DB Browser&#34;&gt;


  &lt;img src=&#34;https://vengaza.github.io/img/nsa2019/003task3/database.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Database opened by DB Browser
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;This database has 3 tables: clients, contacts, and messages. The contacts and messages tables have no data, so we&amp;rsquo;ll focus on the clients table which has 1 row of input. The row has plenty of attribute columns, but there are two that stand out, the &lt;code&gt;xsip&lt;/code&gt; and &lt;code&gt;asip&lt;/code&gt;. These columns possess what seems to be domain names for our potential server targets.&lt;/p&gt;
&lt;p&gt;We can now use these domain names to perform a DNS lookup to determine the IP addresses by using the &lt;code&gt;dig&lt;/code&gt; command on each of them in the terminal.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ dig register.terrortime.app

 OPT PSEUDOSECTION:
 EDNS: version: 0, flags:; udp: 4096
 QUESTION SECTION:
 register.terrortime.app.	IN	A

 ANSWER SECTION:
register.terrortime.app. 3600	IN	CNAME	codebreaker.ltsnet.net.
codebreaker.ltsnet.net.	300	IN	A	54.197.185.236  &amp;lt;--- OAUTH IP

 Query time: 126 msec
 SERVER: 192.168.254.254#53(192.168.254.254)
 WHEN: Fri Jul 03 14:32:14 CDT 2020
 MSG SIZE  rcvd: 104
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ dig chat.terrortime.app

  OPT PSEUDOSECTION:
 EDNS: version: 0, flags:; udp: 4096
 QUESTION SECTION:
 chat.terrortime.app.		IN	A

 ANSWER SECTION:
chat.terrortime.app.	3600	IN	A	54.91.5.130 &amp;lt;--- XMPP IP

 Query time: 82 msec
 SERVER: 192.168.254.254#53(192.168.254.254)
 WHEN: Fri Jul 03 14:34:02 CDT 2020
 MSG SIZE  rcvd: 64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;** Tip: Other command line binaries exist to perform a DNS lookup such as &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;nslookup&lt;/code&gt;, &lt;code&gt;ping&lt;/code&gt;. Try them out and see how the output differs from &lt;code&gt;dig&lt;/code&gt;. *&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Task 4</title>
      <link>https://vengaza.github.io/ctf/nsacodebreaker2019/004task4/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://vengaza.github.io/ctf/nsacodebreaker2019/004task4/</guid>
      <description>&lt;h2 id=&#34;schemes-cryptography-reverse-engineering-language-analysis&#34;&gt;Schemes (Cryptography; Reverse Engineering; Language Analysis)&lt;/h2&gt;
&lt;p&gt;While analyzing the TerrorTime SQLite database found on the terroristâ€™s device, analysts discovered that the database has cached credentials but requires a pin to log in. If we can determine how the credentials are protected and find a way to recover the pin, we should be able to masquerade as the arrested terrorist. Perform reverse engineering to identify how the terroristâ€™s credentials are protected and submit the terrorist&amp;rsquo;s Client ID and Client Secret. Once you have uncovered their credentials, masquerade (i.e., login) as him using the TerrorTime app. Review their chat history and assess additional information regarding their organization. Though the app encrypts messages back and forth, the terrorists have previously spoken in some form of code to ensure their plans were protected. To prove completion of this task, you will need to analyze the terrorist&amp;rsquo;s conversation history in order to uncover/deduce the following information:&lt;/p&gt;
&lt;h3 id=&#34;flags&#34;&gt;Flags&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Cell Leader Username (ASCII)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Action Date (Unix timestamp, integer)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;h3 id=&#34;commands&#34;&gt;Commands&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apkanlyzer -h manifest permissions &amp;lt;FILE.APK&amp;gt;&lt;/code&gt; - Print application permissions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;File-GetHash&lt;/code&gt; - compute and check SHA256 message digest (Windows)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tools&#34;&gt;Tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://developer.android.com/studio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Android Studio&lt;/a&gt; - Google IDE for Android&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://ghidra-sre.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ghidra&lt;/a&gt; - NSA&amp;rsquo;s software reverse engineering suite (Optional)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;analysis&#34;&gt;Analysis&lt;/h3&gt;
&lt;p&gt;Coming soon&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Task 5</title>
      <link>https://vengaza.github.io/ctf/nsacodebreaker2019/005task5/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://vengaza.github.io/ctf/nsacodebreaker2019/005task5/</guid>
      <description>&lt;h2 id=&#34;masquerade-vulnerability-analysis&#34;&gt;Masquerade (Vulnerability Analysis)&lt;/h2&gt;
&lt;p&gt;The app uses a bespoke application of the OAUTH protocol to authorize and authenticate TerrorTime users to the chat service. Our intelligence indicates that individual terrorists are provided phones with TerrorTime installed and pre-registered to them. They simply need to enter their username and secret PIN to access the chat service, which uses OAUTH behind the scenes to generate a unique token that is used for authentication. This is a non-standard way of using the protocol, but they believe it to be superior to normal password-based authentication since a unique token is used per login vs. a static password. Whether that is indeed the case is up to you to analyze and assess for possible vulnerabilities. Our forensics team recovered a deleted file from the terrorist&amp;rsquo;s hard drive that may aid in your analysis.&lt;/p&gt;
&lt;p&gt;Through other intelligence means, we know that the arrested terrorist is a member of one of many cells in a larger organization. He has shown no signs of someone who is acting in a leadership role &amp;ndash; he simply carries out orders given to him from his cell leader, who is likely relaying information from the top-level organizational leader. To uncover information from the cell leaderâ€™s conversations, we need access to their account. The messages are end-to-end encrypted, so without the leader&amp;rsquo;s private key we won&amp;rsquo;t be able to decrypt his messages, but we may be able to learn more about the members of the cell and the organization&amp;rsquo;s structure. Analyze the client and server-side components of the authentication process and find a way to masquerade as arbitrary users without knowing their credentials. Take advantage of this vulnerability and masquerade as the cell leader. Access and review the cell leaderâ€™s relevant information stored on the server. Use this information to identify and submit the top-level organizational leaderâ€™s username and go a step further and submit a copy of the last (still encrypted) message body from the organization leaderâ€™s chat history. Itâ€™s suggested to complete task 4 before attempting this task as task 4 aids in discovering the cell leaderâ€™s identity.&lt;/p&gt;
&lt;h3 id=&#34;flags&#34;&gt;Flags&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; The username of the Top-Level Organization Leader (ASCII)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Last encrypted message body from the Top-Level Organization Leader&amp;rsquo;s chat history (JSON)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://codebreaker.ltsnet.net/files/task5/auth_verify.pyc?1593563870&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Task Files&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;h3 id=&#34;commands&#34;&gt;Commands&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apkanlyzer -h manifest permissions &amp;lt;FILE.APK&amp;gt;&lt;/code&gt; - Print application permissions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;File-GetHash&lt;/code&gt; - compute and check SHA256 message digest (Windows)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tools&#34;&gt;Tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://developer.android.com/studio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Android Studio&lt;/a&gt; - Google IDE for Android&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://ghidra-sre.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ghidra&lt;/a&gt; - NSA&amp;rsquo;s software reverse engineering suite (Optional)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;analysis&#34;&gt;Analysis&lt;/h3&gt;
&lt;p&gt;Coming soon&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
